#+INCLUDE: "../../../common/header.org"
#+TITLE: Docker

* Qué es una máquina virtual
- Un proceso implementa todo el /hardware/ de un PC
  - Representa los discos como ficheros
  - La tarjeta de vídeo utiliza una ventana en vez de un monitor
  - La tarjeta de red real se comparte, utilizando redes virtuales  
- La BIOS/UEFI consigue arrancar normalmente, y ejecuta un sistema operativo
- Conclusión:
  - Un proceso en una máquina virtual no sabe que es /virtual/
  - Los procesos de la máquina virtual están *aislados* de la máquina real  

* Qué es Docker
- Docker integra diversas capacidades de aislamiento entre procesos que tiene Linux
  - [[https://en.wikipedia.org/wiki/Chroot][chroot]]
  - [[https://en.wikipedia.org/wiki/Cgroups][cgroups]]
  - [[https://en.wikipedia.org/wiki/Linux_namespaces][namespaces]]
- Usa además
  - [[https://en.wikipedia.org/wiki/Mount_(Unix)][mount points]], para la comunicación entre /containers/
  - [[https://linuxconfig.org/introduction-to-the-overlayfs][overlayfs]], para construir containers acumulando /capas/
  - [[https://stackoverflow.com/questions/50282792/how-does-docker-network-work][iptables/netfilter]], para simular tarjetas de red
- Conclusión
  - [[https://akashrajpurohit.com/blog/build-your-own-docker-with-linux-namespaces-cgroups-and-chroot-handson-guide/][Se pueden crear containers sin usar Docker]]
  - Docker también aisla procesos entre sí  
    
* Máquina virtual /vs/ Docker

** Comparación gráfica

| [[file:media/esquema-maquina-virtual.png]] | [[file:media/esquema-docker.png]] |

  
** Tabla comparativa

|                               | Docker                              | Máquina Virtual                                             |
|-------------------------------+-------------------------------------+-------------------------------------------------------------|
| SO                            | SO compartido entre contenedores    | Nuevo SO para cada VM                                       |
| Seguridad                     | Menos seguro, se comparte el kernel | Más seguro, no se comparte nada                             |
| Rendimiento                   | Rendimiento rápido                  | La virtualización es más lenta                              |
| Tiempo de arranque            | Rápido (segundos)                   | Lento (minutos)                                             |
| Necesidades de memoria        | Ligera                              | Requiere mucha memoria                                      |
| Necesidades de almacenamiento | Normalmente megabytes               | Normalmente gigabytes                                       |
| Portabilidad                  | En cualquier linux moderno          | El hardware emulado puede diferir entre diferentes sistemas |

* Componentes Docker
- *Cliente*: Usa el /socket/ de Docker para controlar el servidor
- *Servidor* (demonio): Gestiona las imágenes contenedores
- *Imagen*:
  - Personalizadas: con un /dockerfile/
  - Del registro: Imágenes prediseñadas (equivalentes a un fichero *OVA* para máquinas virtuales)
- *Contenedor* Una imagen en ejecución    
- *Registro*: Almacén público de imágenes

* Portabilidad de Docker
- ¿Hay Docker para Windows?
  - Respuesta corta: No
  - Respuesta larga:
    - Hay un /cliente/ Docker para Windows
    - Se instala una máquina virtual con Linux
    - El cliente Docker se conecta al servidor Docker de la máquina virtual
    - También hay [[https://learn.microsoft.com/en-us/virtualization/windowscontainers/about/][/containers/ para Windows]], solo instalables en Windows, que el cliente Docker sabe manejar

* Instalación de Docker
- [[https://docs.docker.com/engine/install/][Página oficial]]
- Para Debian/Ubuntu:
  - Desinstalar las versiones instaladas con =apt-get=
    #+begin_src bash
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc
do
    sudo apt-get remove $pkg
done
    #+end_src
  - Usar el /script/ (no recomendado en producción)
    #+begin_src bash
curl https://get.docker.com/ | sh
    #+end_src

** Prueba de instalación
- Solo =root= y el grupo =docker= pueden usar el servidor Docker
  - Tienen acceso a =/var/run/docker.sock=
  #+begin_src bash
  docker run hello-world
  #+end_src

* Imágenes y /containers/  
** Conceptos básicos
- Una imagen se ejecuta en un /container/. La misma imagen se puede ejecutar en varios /containers/
- Una imagen provee un programa a ejecutar cuando se ejecuta con =run=
  - Cuando ese programa termina, el /container/ se destruye
  - Se puede especificar otro programa a ejecutar
  - Se puede conectar la consola a dicho programa  
    
  #+begin_src bash
  docker run debian # crea un container y termina inmediatamente, bash no tiene entrada
  docker run -it debian # crea un container y conecta la consola al programa por defecto 
  docker run debian /bin/bash -c "echo Un mensaje y termino" 
  #+end_src

** Lista de containers e imágenes
  #+begin_src bash
  docker images
  docker ps # containers en ejecucion
  docker ps -a # todos los containers
  #+end_src
  - Conclusión: =run= no ejecuta /containers/, sino que crea y ejecuta /containers/
    - =run= = =create= + =start=
  - Los "parámetros" de un /container/ se especifican en su creación. No se pueden cambiar al ejecutarlos.  
  - Los /container/ tienen un nombre. Si no se especifica, Docker inventa uno.
* Volúmenes
- Los /containers/ son inmutables.
  - Los datos modificados en el /container/ son una capa adicional ([[https://linuxconfig.org/introduction-to-the-overlayfs][overlayfs]])
  - Desaparecen al apagar el /container/
- La persistencia se puede conseguir con
  - volúmenes
  - /mounts/

** /mounts/
- Equivalente a un =mount --bind=
  #+begin_src bash
  docker run -it --mount type=bind,src="$(pwd)",target=/src debian bash
  #+end_src

** Volúmenes
- Puntos de montaje definidos al crear la imagen
  - Suelen ser directorios importantes para la aplicación /containerizada/
- Pueden ser
  - directorios creados y manejados internamente por Docker
  - directorios del /file system/
  #+begin_src bash
  docker run -dit --name my-apache-app -p 8080:80 -v $HOME:/usr/local/apache2/htdocs/ httpd:2.4
  #+end_src
  - =-dit= : *i* nteractive, *t* ty, *d* etached
  - =-p 8080:80= : El puerto =8080= de la dirección =0.0.0.0= se conecta a la /ip/ del /container/, puerto =80=
  - =-v= : El volumen =/usr/local/apache2/htdocs= será el directorio /home/  
  - Resultado: Apache corriendo en el puerto 8080 sirviendo los ficheros del directorio /home/

* "Entrar" en un /container/
- Se pueden ejecutar comandos en un /container/ en ejecución
  #+begin_src bash
  docker exec -it my-apache-app bash
  #+end_src
  - *-i*: Ejecutar de forma interactiva (redirigir entrada y salida estándar)
  - *-t*: Ejecutar en un TTY (una consola)

* /Logs/ de un /container/
- La salida del punto de entrada se considera el /log/ del container
  #+begin_src bash
  docker logs --follow nombre-container
  #+end_src
  
* Usuarios
- Los usuarios en Linux se identifican por un número
  - Docker comparte el /kernel/ con el sistema operativo  
  - Por tanto, los usuarios de los /containers/ son los del Linux real
- Conclusiones    
  - Se comparten los identificadores, no los nombres
  - El usuario /root/ es el mismo en todos los /containers/ y en el Linux real
  - Cuidado con la seguridad!

* /Docker registry/
- Las imágenes se almacenan en registros
  - El registro por defecto es https://registry.hub.docker.com
  - Los siguientes comandos son equivalentes
    #+begin_src bash
    docker run hello-world
    docker run registry.hub.docker.com/hello-world
    #+end_src
- Oracle tiene un registro para sus imágenes
  - https://container-registry.oracle.com/
  - Se necesita registro (gratis) en [[https://profile.oracle.com/myprofile/account/create-account.jspx][Oracle]]
  - La contraseña del registro no es la de la cuenta de Oracle, sino el /Auth token/
    #+begin_src bash
    docker login container-registry.oracle.com/
    #+end_src

** /Cache/ en el instituto

| =10.1.33.201:8090= |

- Es un /registry/ inseguro (sin https).  
- Para poder usarse hay que modificar/crear el fichero =/etc/docker/daemon.json=

#+begin_src javascript  
{
    "insecure-registries":["10.1.33.201:8090"]
}
#+end_src


* Práctica: Instalar Webmin
- Es un sistema para manejar servidores Linux mediante con una interfaz web
- Comprueba qué se ha instalado en el /container/ y lanza una /shell/ desde la web
#+begin_src bash
sudo docker run -p 10000:10000 10.1.33.201:8090/johanp/webmin
#+end_src

* Práctica: Instalar Portainer
- Es un sistema para manejar los contenedores Docker, instalado dentro de Docker (¿?)
  - Lo consigue dejando que el container acceda a =/var/run/docker.sock=
- [[https://docs.portainer.io/start/install-ce/server/docker/linux][https://docs.portainer.io/start/install-ce/server/docker/linux]]

#+begin_src bash
docker volume create portainer_data
docker run -d -p 8000:8000 -p 9443:9443 \
  --name portainer \
  --restart=always \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v portainer_data:/data portainer/portainer-ce:latest
#+end_src  

* Práctica: instalar Oracle
- Usaremos la imagen =container-registry.oracle.com/database/enterprise:21.3.0.0=
- Se recomienda usar el /registry/ del instituto, que no necesita contraseña
  - =sudo docker pull 10.1.33.201:8090/database/enterprise:21.3.0.0=


** Instrucciones
- Instrucciones: https://container-registry.oracle.com/ords/ocr/ba/database/enterprise

#+begin_example
docker run -d --name <container_name> \
 -p <host_port>:1521 -p <host_port>:5500 \
 -e ORACLE_SID=<your_SID> \
 -e ORACLE_PDB=<your_PDBname> \
 -e ORACLE_PWD=<your_database_password> \
 -e INIT_SGA_SIZE=<your_database_SGA_memory_MB> \
 -e INIT_PGA_SIZE=<your_database_PGA_memory_MB> \
 -e ORACLE_EDITION=<your_database_edition> \
 -e ORACLE_CHARACTERSET=<your_character_set> \
 -e ENABLE_ARCHIVELOG=true \
 -v [<host_mount_point>:]/opt/oracle/oradata \
container-registry.oracle.com/database/enterprise:21.3.0.0

Parameters:
 --name:                 The name of the container (default: auto generated
 -p:                     The port mapping of the host port to the container port.
                         Two ports are exposed: 1521 (Oracle Listener), 5500 (OEM Express)
 -e ORACLE_SID:          The Oracle Database SID that should be used (default:ORCLCDB)
 -e ORACLE_PDB:          The Oracle Database PDB name that should be used (default: ORCLPDB1)
 -e ORACLE_PWD:          The Oracle Database SYS, SYSTEM and PDBADMIN password (default: auto generated)
 -e INIT_SGA_SIZE:       The total memory in MB that should be used for all SGA components (optional)
 -e INIT_PGA_SIZE:       The target aggregate PGA memory in MB that should be used for all server processes attached to the instance (optional)
 -e ORACLE_EDITION:      The Oracle Database Edition (enterprise/standard, default: enterprise)
 -e ORACLE_CHARACTERSET: The character set to use when creating the database (default: AL32UTF8)
 -e ENABLE_ARCHIVELOG:   To enable archive log mode when creating the database (default: false). Supported 19.3 onwards.
 -v /opt/oracle/oradata
                         The data volume to use for the database. Has to be writable by the Unix "oracle" (uid: 54321) user inside the container
                         If omitted the database will not be persisted over container recreation.
 -v /opt/oracle/scripts/startup | /docker-entrypoint-initdb.d/startup
                         Optional: A volume with custom scripts to be run after database startup.
                         For further details see the "Running scripts after setup and on
                         startup" section below.
 -v /opt/oracle/scripts/setup | /docker-entrypoint-initdb.d/setup
                         Optional: A volume with custom scripts to be run after database setup.
                         For further details see the "Running scripts after setup and on startup" section below.
#+end_example

** En nuestro caso
- Puerto =1521= del container al =1521= de la máquina /host/
- Ficheros de datos en =/opt/oracle/oradata= del la máquina /host/
- Nombre del container =oracle-enterprise-21.3.0.0=
- SID: =ORADOCKER=
- PDB: =PDBORADOCKER=  
- Haz un /script/ en el /host/ para ejecutar =sqlplus= como =SYSDBA=
  - =/opt/oracle/sqplus-as-sysdba.sh=
  - con =docker exec=
  - puede ayudarte =bash -c=
- Haz un /script/ en el /host/ para ejecutar =sqlplus= como =SYSDBA= en la PDB
  - =/opt/oracle/sqplus-as-sysdba-pdb.sh=
    

* Referencias
#+include: "../../../common/footer.org"


* Avanzado: crear una imagen :noexport:
https://docs.docker.com/get-started/02_our_app/

* a33pcprofesor :noexport:

- para borrar del disco /
  - /opt/android-studio
  - file:///var/www/html/natali/EXAMEN.ova
    
